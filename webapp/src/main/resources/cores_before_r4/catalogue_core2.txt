@prefix cat: <urn:oasis:names:specification:ubl:schema:xsd:Catalogue-2#> ;
@prefix cac: <urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2#> ;
@prefix cbc: <urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2#> ;


@filter rdf:type is cac:CatalogueLineType ;

item.id = cbc:ID :: xsd:string;
item.catalogue_id = cac:GoodsItem / cac:Item / cac:CatalogueDocumentReference / cbc:ID :: xsd:string;
item.name = cac:GoodsItem / cac:Item / fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value,cbc:Name) :: xsd:string (suggestionType="facet");
item.description = cac:GoodsItem / cac:Item / fn:first(cbc:Description[rdf:type is cbc:TextType] /cbc:Value , cbc:Description) :: xsd:string ;
item.image = cac:GoodsItem / cac:Item / cbc:ProductImage / cbc:ValueBinary :: xsd:string ;

facet.price = cac:RequiredItemLocationQuantity /  cac:Price /  cbc:PriceAmount / cbc:ValueDecimal :: xsd:double;
facet.price_currency = cac:RequiredItemLocationQuantity / cac:Price /  cbc:PriceAmount / cbc:currencyID :: xsd:string;
facet.free_of_charge_indicator = cbc:FreeOfChargeIndicator :: xsd:boolean;
facet.certificate_type = cac:GoodsItem / cac:Item / cac:Certificate / cbc:CertificateType :: xsd:string;
facet.applicable_countries = cac:RequiredItemLocationQuantity / cac:ApplicableTerritoryAddress / cac:Country / fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value , cbc:Name) :: xsd:string;

facet.manufacturer_name = cac:GoodsItem / cac:Item / cac:ManufacturerParty / fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name) :: xsd:string;
item.manufacturer_id = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cbc:ID :: xsd:string;
facet.manufacturer_origin = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cac:PostalAddress / cac:Country / fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name) :: xsd:string;
facet.manufacturer_certificate_type = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cac:Certificate / cbc:CertificateType :: xsd:string;
facet.manufacturer_ppap_compliance_level = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cbc:PpapCompatibilityLevel :: xsd:double;
facet.manufacturer_ppap_document_type = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cac:PpapDocumentReference / cbc:DocumentType :: xsd:string;

facet.estimated_delivery_time = cac:GoodsItem / cac:DeliveryTerms / cac:EstimatedDeliveryPeriod / cbc:DurationMeasure / cbc:ValueDecimal :: xsd:double;
facet.estimated_delivery_time_unit = cac:GoodsItem / cac:DeliveryTerms / cac:EstimatedDeliveryPeriod / cbc:DurationMeasure / cbc:unitCode :: xsd:string;
item.package_amount = cac:GoodsItem / cac:ContainingPackage / cbc:Quantity / cbc:ValueDecimal :: xsd:double;
item.package_amount_unit = cac:GoodsItem / cac:ContainingPackage / cbc:Quantity / cbc:unitCode :: xsd:string;
facet.package_type = cac:GoodsItem / cac:ContainingPackage / cbc:PackagingTypeCode / cbc:Value :: xsd:string;
element.commodity_classification = cac:GoodsItem / cac:Item / cac:CommodityClassification / cbc:ItemClassificationCode :: xsd:anyURI;
facet.commodity_classification = cac:GoodsItem / cac:Item / cac:CommodityClassification / cbc:ItemClassificationCode / cbc:name :: xsd:string;
uri.commodity_classification = cac:GoodsItem / cac:Item / cac:CommodityClassification / cbc:ItemClassificationCode / cbc:URI :: xsd:string;
uri_name.commodity_classification = cac:GoodsItem / cac:Item / cac:CommodityClassification / cbc:ItemClassificationCode / fn:concat(cbc:URI, ":", cbc:name) :: xsd:string;
item.additional_properties = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty / fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name) :: xsd:string;

facet.service_type = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cbc:TransportServiceCode / cbc:name :: xsd:string;
facet.cargo_type_code = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:SupportedCommodityClassification / cbc:CargoTypeCode / cbc:name :: xsd:string;
facet.nature_code = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:SupportedCommodityClassification /  cbc:NatureCode / cbc:name :: xsd:string;
facet.total_capacity = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:TotalCapacityDimension / cbc:Measure / cbc:ValueDecimal :: xsd:double;
facet.total_capacity_unit = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:TotalCapacityDimension / cbc:Measure / cbc:unitCode :: xsd:string;
facet.transport_mode_code = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:ShipmentStage / cbc:TransportModeCode / cbc:name :: xsd:string;
facet.emission_type_code = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EnvironmentalEmission / cbc:EnvironmentalEmissionTypeCode / cbc:name :: xsd:string;
facet.duration_value = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EstimatedDurationPeriod / cbc:DurationMeasure / cbc:ValueDecimal :: xsd:double;
facet.duration_code = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EstimatedDurationPeriod / cbc:DurationMeasure / cbc:unitCode :: xsd:string;

df_unit = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "QUANTITY"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:ValueQuantity/cbc:unitCode) | cac:GoodsItem / cac:Item / cac:Dimension / fn:dynamic(cbc:AttributeID, cbc:Measure/cbc:unitCode) :: lmf:dynamic (dynamicField="facet.unit.*", solrType="string") ;
df_value = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "QUANTITY"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:ValueQuantity/cbc:ValueDecimal) | cac:GoodsItem / cac:Item / cac:Dimension / fn:dynamic(cbc:AttributeID, cbc:Measure/cbc:ValueDecimal) :: lmf:dynamic (dynamicField="facet.value.*", solrType="double") ;
df_qualified = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "QUANTITY"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:ValueQuantity/cbc:ValueDecimal, cbc:ValueQuantity/cbc:unitCode) | cac:GoodsItem / cac:Item / cac:Dimension / fn:dynamic(cbc:AttributeID, cbc:Measure/cbc:ValueDecimal, cbc:Measure/cbc:unitCode) :: lmf:dynamic (dynamicField="facet.quantity.*", solrType="double") ;
df_d = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "REAL_MEASURE"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:ValueDecimal) :: lmf:dynamic (dynamicField="facet.double.*", solrType="double") ;
df_s = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "STRING"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:Value / cbc:Value) :: lmf:dynamic (dynamicField="facet.string.*", solrType="string") ;
df_st = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "STRING_TRANSLATABLE"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:Value / cbc:Value) :: lmf:dynamic (dynamicField="facet.translatable.*", solrType="string") ;
df_b = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "BOOLEAN"] / fn:dynamic(fn:first(cbc:Name[rdf:type is cbc:TextType] /cbc:Value, cbc:Name), cbc:Value / cbc:Value) :: lmf:dynamic (dynamicField="facet.boolean.*", solrType="boolean") ;