#
# Copyright (C) 2013 Salzburg Research.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


###############################################################################
# LMF search configuration
###############################################################################

# turn on or off versioning of transactions; if versioning is not needed, this can give a significant performance
# improvement
solr.enabled = true

# the SOLR cores that are currently enabled in the system; must be a subset of solr.cores.available
solr.cores = rdf,skos,dc,testidx


solr.schedule_program_filter = false

solr.rdf.program =   @prefix hg : <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> ;\n  title   = rdfs:label :: xsd:string ;\n  summary = rdfs:comment :: lmf:text ;\n  tag     = hg:taggedWithTag / hg:name :: xsd:string ;\n  type    = rdf:type :: xsd:anyURI ;
solr.rdf.local_only=false

solr.skos.program =   @prefix hg : <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> ;\n  @filter rdf:type is skos:Concept ;\n  title   = skos:prefLabel | skos:altLabel :: xsd:string;\n  summary = skos:definition :: lmf:text;\n  tag     = hg:taggedWithTag / hg:name :: xsd:string ;\n  type    = rdf:type :: xsd:anyURI ;
solr.skos.local_only=false

solr.dc.program =   @prefix hg : <http://www.holygoat.co.uk/owl/redwood/0.1/tags/> ;\n  title   = dc:title :: xsd:string;\n  summary = dc:description :: lmf:text;\n  tag     = hg:taggedWithTag / hg:name :: xsd:string;\n  type    = rdf:type :: xsd:anyURI;
solr.dc.local_only = false

solr.testidx.programm = "
@prefix cat: <urn:oasis:names:specification:ubl:schema:xsd:Catalogue-2#> ;
@prefix cac: <urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2#> ;
@prefix cbc: <urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2#> ;


@filter rdf:type is cac:CatalogueLineType ;

item_id = cbc:ID :: xsd:string;
item_catalogue_id = cac:GoodsItem / cac:Item / cac:CatalogueDocumentReference / cbc:ID :: xsd:string;
item_name = cac:GoodsItem / cac:Item / cbc:Name :: xsd:string;
item_description = cac:GoodsItem / cac:Item / cbc:Description :: xsd:string ;
item_image = cac:GoodsItem / cac:Item / cbc:ProductImage / cbc:ValueBinary :: xsd:string ;

item_price = cac:RequiredItemLocationQuantity /  cac:Price /  cbc:PriceAmount / cbc:ValueDecimal :: xsd:decimal;
item_price_currency = cac:RequiredItemLocationQuantity / cac:Price /  cbc:PriceAmount / cbc:currencyID :: xsd:string;
item_free_of_charge_indicator = cbc:FreeOfChargeIndicator :: xsd:boolean;
item_certificate = cac:GoodsItem / cac:Item / cac:Certificate / cbc:CertificateType :: xsd:string;

item_manufacturer_name = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cbc:Name :: xsd:string;
item_manufacturer_id = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cbc:ID :: xsd:string;
item_manufacturer_origin = cac:GoodsItem / cac:Item / cac:ManufacturerParty / cac:PostalAddress / cac:Country / cbc:Name :: xsd:string;

item_estimated_delivery_time = cac:GoodsItem / cac:DeliveryTerms / cac:EstimatedDeliveryPeriod / cbc:DurationMeasure / cbc:ValueDecimal :: xsd:decimal;
item_estimated_delivery_time_unit = cac:GoodsItem / cac:DeliveryTerms / cac:EstimatedDeliveryPeriod / cbc:DurationMeasure / cbc:unitCode :: xsd:string;
item_package_amount = cac:GoodsItem / cac:ContainingPackage / cbc:Quantity / cbc:ValueDecimal :: xsd:decimal;
item_package_amount_unit = cac:GoodsItem / cac:ContainingPackage / cbc:Quantity / cbc:unitCode :: xsd:string;
item_package_type = cac:GoodsItem / cac:ContainingPackage / cbc:PackagingTypeCode / cbc:Value :: xsd:string;
item_commodity_classification = cac:GoodsItem / cac:Item / cac:CommodityClassification / cbc:ItemClassificationCode / cbc:name :: xsd:string;
item_properties = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty / cbc:Name :: xsd:string;

service_type = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cbc:TransportServiceCode / cbc:name :: xsd:string;
supported_product_nature = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:SupportedCommodityClassification / cbc:CargoTypeCode / cbc:name :: xsd:string;
supported_cargo_type = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:SupportedCommodityClassification /  cbc:NatureCode / cbc:name :: xsd:string;
total_capacity = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:TotalCapacityDimension / cbc:Measure / cbc:ValueDecimal :: xsd:decimal;
total_capacity_unit = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:TotalCapacityDimension / cbc:Measure / cbc:unitCode :: xsd:string;
mode = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:ShipmentStage / cbc:TransportModeCode / cbc:name :: xsd:string;
emission_standard = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EnvironmentalEmission / cbc:EnvironmentalEmissionTypeCode / cbc:name :: xsd:string;
estimated_duration = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EstimatedDurationPeriod / cbc:DurationMeasure / cbc:ValueDecimal :: xsd:decimal;
estimated_duration_unit = cac:GoodsItem / cac:Item / cac:TransportationServiceDetails / cac:EstimatedDurationPeriod / cbc:DurationMeasure / cbc:unitCode :: xsd:string;


df_qualified = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "QUANTITY"] / fn:dynamic(cbc:Name, cbc:ValueQuantity/cbc:ValueDecimal, cbc:ValueQuantity/cbc:unitCode) :: lmf:dynamic (dynamicField="*_q", solrType="double") ;
df_d = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "REAL_MEASURE"] / fn:dynamic(cbc:Name, cbc:ValueDecimal) :: lmf:dynamic (dynamicField="*_d", solrType="double") ;
df_s = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "STRING"] / fn:dynamic(cbc:Name, cbc:Value) :: lmf:dynamic (dynamicField="*_s", solrType="string") ;
df_st = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "STRING_TRANSLATABLE"] / fn:dynamic(cbc:Name, cbc:Value) :: lmf:dynamic (dynamicField="*_st", solrType="string") ;
df_b = cac:GoodsItem / cac:Item / cac:AdditionalItemProperty[cbc:ValueQualifier is "BOOLEAN"] / fn:dynamic(cbc:Name, cbc:Value) :: lmf:dynamic (dynamicField="*_b", solrType="boolean") ;
"

solr.testidx.local_only = true