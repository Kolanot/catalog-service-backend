#
# Copyright (C) 2013 Salzburg Research.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


###############################################################################
# LMF search configuration
###############################################################################

solr.enabled.description = turn on or off search indexing; if semantic search is not needed, this can give a \
  significant performance improvement
solr.enabled.type = java.lang.Boolean


solr.schedule_program_filter.description = use the LDPath program filter already when scheduling resources; since this can be \
  a potentially expensive operation (e.g. when refreshing the resource from the LD Cloud), it is disabled by default
solr.schedule_program_filter.type = java.lang.Boolean

solr.core.*.local_only.description = turn on to allow only local resources in the SOLR index; if false, all resources will \
  be considered by the indexer
solr.core.*.local_only.type = java.lang.Boolean

solr.core.*.omit_cached.description = turn on to allow only non-cached resources in the SOLR index; if false, all resources \
  will be considered by the indexer
solr.core.*.omit_cached.type = java.lang.Boolean

solr.core.*.threads.description = how many indexer threads to start in parallel
solr.core.*.threads.type = java.lang.Integer(1|1|*)

solr.core.*.queuesize.description = how many resources to schedule for indexing before blocking; increasing this value \
  might result in increased memory consumption
solr.core.*.queuesize.type = java.lang.Integer(1000|1000|*)

solr.core.*.batchsize.description = size of batches to store in the SOLR index; when reached, the batch is sent to the \
  server and the cycle starts again
solr.core.*.batchsize.type = java.lang.Integer(100|0|*)

solr.core.*.committimer.description = if the batchsize is not reached and no update occurs in the number of milliseconds \
  specified by this parameter, the batch is committed nonetheless
solr.core.*.committimer.type = java.lang.Integer(1000|1000|*)

solr.core.*.optimize.description  = after how many documents should the SOLR index be optimized?
solr.core.*.optimize.type  = java.lang.Integer(100|0|*)

solr.cores.description = the SOLR cores that are currently enabled in the system; must be a subset of \
  solr.cores.available
solr.cores.type = java.util.List


solr.core.*.update_dependencies.description = whether to trigger automatic updating of dependent resources whenever a \
  resource that has been used in an LDPath evaluation is updated (experimental, careful with cyclic dependencies!)
solr.core.*.update_dependencies.type = java.lang.Boolean

solr.core.*.clear_before_reschedule.description = whether to clear the index before rescheduling all resources; in case \
  this option is disabled, resources will only be updated in the index, which is slower but allows the index to stay \
  available while indexing
solr.core.*.clear_before_reschedule.type = java.lang.Boolean

solr.core.*.server_type.description=Type of the connected Apache SOLR instance
solr.core.*.server_type.type=java.lang.Enum("EMBEDDED"|"REMOTE"|"CLOUD")

solr.server_type.description=Type of the connected Apache SOLR instance
solr.server_type.type=java.lang.Enum("EMBEDDED"|"REMOTE"|"CLOUD")

solr.server_uri.description=Network Address of the connected Apache SOLR instance (for REMOTE and CLOUD)
solr.server_uri.type=java.lang.String

solr.core.*.program.description = a core for RDF properties
solr.core.*.program.type = org.marmotta.type.Program

solr.core.skos.program.type = org.marmotta.type.Program
solr.core.dc.program.type = org.marmotta.type.Program
solr.core.rdf.program.type = org.marmotta.type.Program

